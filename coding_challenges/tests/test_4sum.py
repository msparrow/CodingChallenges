
import pytest
from solutions.solution_13 import four_sum

@pytest.mark.parametrize("nums, target, expected", [
    ([1, 0, -1, 0, -2, 2], 0, sorted([[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]])),
    ([2, 2, 2, 2, 2], 8, sorted([[2, 2, 2, 2]])),
    ([1, 2, 3, 4], 10, sorted([[1, 2, 3, 4]])),
    ([-2, -1, 0, 1, 2], 0, sorted([[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]])),
    ([-3, -1, 0, 2, 4, 5], 0, sorted([[-3, -1, 0, 4]])),
    ([-3, -1, 0, 2, 4, 5], 1, sorted([[-3, -1, 0, 5], [-3, -1, 2, 2]])),
    ([0, 0, 0, 0], 0, sorted([[0, 0, 0, 0]])),
    ([-1, 0, 1, 2, -1, -4], -1, sorted([[-4, 0, 1, 2], [-1, -1, 0, 1]])),
    ([1, -2, -5, -4, -3, 3, 3, 5], -11, sorted([[-5, -4, -3, 1]])),
    ([0, 0, 0, 1000000000, 1000000000, 1000000000, 1000000000], 1000000000, sorted([[0, 0, 0, 1000000000]])),
    # 20 new test cases
    ([-4, -3, -2, -1, 0, 1, 2, 3, 4], 0, sorted([[-4, -3, 3, 4], [-4, -2, 2, 4], [-4, -1, 1, 4], [-4, -1, 2, 3], [-4, 0, 1, 3], [-3, -2, 1, 4], [-3, -2, 2, 3], [-3, -1, 0, 4], [-3, -1, 1, 3], [-3, 0, 1, 2], [-2, -1, 0, 3], [-2, -1, 1, 2]])),
    ([5, 5, 3, 5, 1, -5, 1, -2], 4, sorted([[-5, 1, 3, 5]])),
    ([1, 1, 1, 1, 1, 1], 4, sorted([[1, 1, 1, 1]])),
    ([-1, -5, -5, -3, 2, 5, 0, 4], -7, sorted([[-5, -5, -1, 4], [-5, -3, -1, 2]])),
    ([0, 1, 2, 3, 4, 5], 10, sorted([[0, 1, 4, 5], [0, 2, 3, 5], [1, 2, 3, 4]])),
    ([-2, 0, 0, 3, 3, -1], 2, sorted([[-2, 0, 1, 3]])),
    ([10, 2, 3, 4, 5, 7, 8], 23, sorted([[2, 4, 7, 10], [3, 5, 7, 8]])),
    ([-2, -1, 1, 2, 3, 4, 5], 8, sorted([[-1, 2, 3, 4], [0, 1, 3, 4], [0, 2, 3, 3]])),
    ([2, 1, 0, -1, -2, -3], -3, sorted([[-3, -1, 0, 1]])),
    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 25, sorted([[1, 5, 9, 10], [1, 6, 8, 10], [1, 7, 8, 9], [2, 4, 9, 10], [2, 5, 8, 10], [2, 6, 7, 10], [2, 6, 8, 9], [3, 4, 8, 10], [3, 5, 7, 10], [3, 5, 8, 9], [3, 6, 7, 9], [4, 5, 6, 10], [4, 5, 7, 9], [4, 6, 7, 8]])),
    ([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5], 0, sorted([[-5, -4, 4, 5], [-5, -3, 3, 5], [-5, -2, 2, 5], [-5, -2, 3, 4], [-5, -1, 1, 5], [-5, -1, 2, 4], [-5, 0, 1, 4], [-5, 0, 2, 3], [-4, -3, 2, 5], [-4, -3, 3, 4], [-4, -2, 1, 5], [-4, -2, 2, 4], [-4, -1, 0, 5], [-4, -1, 1, 4], [-4, -1, 2, 3], [-4, 0, 1, 3], [-3, -2, 0, 5], [-3, -2, 1, 4], [-3, -2, 2, 3], [-3, -1, 0, 4], [-3, -1, 1, 3], [-3, 0, 1, 2], [-2, -1, 0, 3], [-2, -1, 1, 2]])),
    ([0, 0, 0, 0, 0], 0, sorted([[0, 0, 0, 0]])),
    ([-1, 0, 1, 2, -1, -4], -1, sorted([[-4, 0, 1, 2], [-1, -1, 0, 1]])),
    ([1, -2, -5, -4, -3, 3, 3, 5], -11, sorted([[-5, -4, -3, 1]])),
    ([0, 0, 0, 1000000000, 1000000000, 1000000000, 1000000000], 1000000000, sorted([[0, 0, 0, 1000000000]])),
    ([1, 2, 3, 4, 5], 11, sorted([[1, 2, 3, 5]])),
    ([1, 1, 2, 2, 3, 3], 7, sorted([[1, 1, 2, 3], [1, 2, 2, 2]])),
    ([-3, -2, -1, 0, 1, 2, 3], 0, sorted([[-3, -2, 2, 3], [-3, -1, 1, 3], [-3, 0, 1, 2], [-2, -1, 0, 3], [-2, -1, 1, 2]])),
    ([1, 5, 0, -1, -2, 3], 2, sorted([[-2, 0, 1, 3], [-1, 0, 1, 2]])),
    ([1, 1, -1, -1, 2, -2], 0, sorted([[-2, -1, 1, 2], [-1, -1, 1, 1], [-1, -1, 2, 0], [-1, 1, 0, 0]]))
])
def test_four_sum(nums, target, expected):
    result = four_sum(nums, target)
    # Sort the inner lists and the outer list to make the test deterministic
    assert sorted([sorted(t) for t in result]) == sorted([sorted(t) for t in expected])