
import pytest
from solutions.solution_1 import two_sum

@pytest.mark.parametrize("nums, target, expected", [
    ([2, 7, 11, 15], 9, [0, 1]),
    ([3, 2, 4], 6, [1, 2]),
    ([3, 3], 6, [0, 1]),
    ([-1, -2, -3, -4, -5], -8, [2, 4]),
    ([0, 4, 3, 0], 0, [0, 3]),
    ([5, 5, 5, 5], 10, [0, 1]),
    ([-3, 4, 3, 90], 0, [0, 2]),
    ([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 2, [0, 1]),
    (list(range(1000)), 1997, [998, 999]),
    (list(range(0, -1000, -1)), -1997, [998, 999]),
    ([1, 2, 3, 4, 5], 9, [3, 4]),
    ([10, 20, 30, 40, 50], 90, [3, 4]),
    ([1, 5, 9, 13, 17], 22, [2, 3]),
    ([2, 3, 5, 7, 11], 8, [1, 2]),
    ([1, 1, 8, 8], 9, [0, 2]),
    ([4, 4, 4, 4], 8, [0, 1]),
    ([1, 2, 3, 4], 7, [2, 3]),
    ([1, 2, 3], 4, [0, 2]),
    ([1, 2], 3, [0, 1]),
    ([1, 5, 2, 7, 3, 8, 4, 9], 10, [0, 7]),
    ([100, 200, 300, 400, 500], 900, [3, 4]),
    ([1, 10, 100, 1000], 1100, [2, 3]),
    ([3, 5, -4, 8, 11, 1, -1, 6], 10, [3, 6]),
    ([2, 7, 11, 15], 26, [2, 3]),
    ([3, 2, 4], 5, [0, 1]),
    ([3, 3], 7, None),
    ([1, 2, 3, 4, 5], 10, None),
    ([1, 1, 1, 1], 3, None),
    ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50], 99, [48, 49]),
    ([-10, -20, -30, -40, -50], -90, [3, 4]),
    ([1.5, 2.5, 3.5], 4.0, [0, 1]),
    ([1, 2, 3, 4, 5], 1, None),
    ([1, 2, 3, 4, 5], 10, [3, 4]),
    ([1, 2, 3, 4, 5], 6, [1, 3]),
    ([1, 2, 3, 4, 5], 5, [1, 2]),
    ([1, 2, 3, 4, 5], 4, [0, 2]),
    ([1, 2, 3, 4, 5], 3, [0, 1]),
    ([1, 2, 3, 4, 5], 2, None),
    ([1, 2, 3, 4, 5], 0, None),
    ([-1, -2, -3, -4, -5], -1, None),
    ([-1, -2, -3, -4, -5], -9, [3, 4]),
    ([-1, -2, -3, -4, -5], -6, [1, 3]),
    ([-1, -2, -3, -4, -5], -5, [1, 2]),
    ([-1, -2, -3, -4, -5], -4, [0, 2]),
    ([-1, -2, -3, -4, -5], -3, [0, 1]),
    ([-1, -2, -3, -4, -5], -2, None),
    ([-1, -2, -3, -4, -5], 0, None)
])
def test_two_sum(nums, target, expected):
    assert two_sum(nums, target) == expected



